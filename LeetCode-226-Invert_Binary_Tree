Problem Statement:

Invert a binary tree.

Example:

Input:

     4
   /   \
  2     7
 / \   / \
1   3 6   9
Output:

     4
   /   \
  7     2
 / \   / \
9   6 3   1
Trivia:
This problem was inspired by this original tweet by Max Howell:

Google: 90% of our engineers use the software you wrote (Homebrew), but you canâ€™t invert a binary tree on a whiteboard so f*** off.

Class Defination:

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */

Solution 1 (Recursion):

class Solution {
    public TreeNode invertTree(TreeNode root) {
        if (root == null) {
            return null;
        }
        
        TreeNode leftInvertedNode = invertTree(root.left);
        root.left = invertTree(root.right);
        root.right = leftInvertedNode;
        return root;
    }
}

Solution 2 (Iteration):

class Solution {
    public TreeNode invertTree(TreeNode root) {
        if (root == null) {
            return null;
        }
        Queue<TreeNode> queue = new LinkedList<TreeNode>();
        queue.add(root);
        
        while(!queue.isEmpty()){
            TreeNode currentNode = queue.poll();
            TreeNode tempNode = currentNode.left;
            currentNode.left = currentNode.right;
            currentNode.right = tempNode;
            
            if(currentNode.left != null){
                queue.add(currentNode.left);
            }
            
            if(currentNode.right != null){
                queue.add(currentNode.right);
            }
        }
        return root;
    }
}

