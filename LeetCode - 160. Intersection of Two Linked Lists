Problem Statement : - 

Write a program to find the node at which the intersection of two singly linked lists begins.

For example, the following two linked lists:


begin to intersect at node c1.

Input: intersectVal = 8, listA = [4,1,8,4,5], listB = [5,6,1,8,4,5], skipA = 2, skipB = 3
Output: Reference of the node with value = 8
Input Explanation: The intersected node's value is 8 (note that this must not be 0 if the two lists intersect). 
From the head of A, it reads as [4,1,8,4,5]. From the head of B, it reads as [5,6,1,8,4,5]. 
There are 2 nodes before the intersected node in A; 
There are 3 nodes before the intersected node in B.

Class Defination : -

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
 

Solution 1: - Using HashSet

public class Solution {
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        HashSet<ListNode> set = new HashSet<ListNode>();
        while(headA!=null||headB!=null){
            if(headA!=null) {
                if(set.contains(headA)){
                    return headA;
                } else {
                    set.add(headA);
                }
                headA=headA.next;
            }
       
            if(headB!=null) {
                if(set.contains(headB)) {
                    return headB;
                } else {
                    set.add(headB);
                }
                headB=headB.next;
            }
        }
        return null;
        
    }
}

Solution 2 : - Using 2 Pointer

public class Solution {
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        ListNode p1 = headA, p2 = headB;
        while (p1 != p2) {
            if (p1 == null) {
                p1 = headB;   // switch to headB
            } else {
                p1 = p1.next;
            }
        
            if (p2 == null) {
                p2 = headA;   // switch to headA
            } else {
                p2 = p2.next;
            }
        }
        return p1;
    }
}



