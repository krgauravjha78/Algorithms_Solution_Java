Problem Statement : -

You are climbing a stair case. It takes n steps to reach to the top.

Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?

Example 1:

Input: 2
Output: 2
Explanation: There are two ways to climb to the top.
1. 1 step + 1 step
2. 2 steps
Example 2:

Input: 3
Output: 3
Explanation: There are three ways to climb to the top.
1. 1 step + 1 step + 1 step
2. 1 step + 2 steps
3. 2 steps + 1 step
 

Constraints:

1 <= n <= 45


Solution 1: - With Map

class Solution {
    Map<Integer, Integer> map = new HashMap<>();
    Solution() {
        map.put(1, 1);
        map.put(2, 2); 
    }
    
    public int climbStairs(int n) {
        if (n <= 0)
            return 0;
        if (map.containsKey(n))
            return map.get(n);
        map.put(n, climbStairs(n-1)+climbStairs(n-2));
        return map.get(n);
    }
}


Solution 2: - Without Map

class Solution {
    public int climbStairs(int n) {
        if(n == 1){
            return 1;
        }
        
        int first = 1;
        int second = 2;
        
        for(int i = 3; i <= n ; i ++){
            int third = first + second;
            first = second;
            second = third;
        }
        
        return second;
    }
}
