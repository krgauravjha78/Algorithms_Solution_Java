Problem Statement : - 

Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.

push(x) -- Push element x onto stack.
pop() -- Removes the element on top of the stack.
top() -- Get the top element.
getMin() -- Retrieve the minimum element in the stack.
 

Example 1:

Input
["MinStack","push","push","push","getMin","pop","top","getMin"]
[[],[-2],[0],[-3],[],[],[],[]]

Output
[null,null,null,null,-3,null,0,-2]

Explanation
MinStack minStack = new MinStack();
minStack.push(-2);
minStack.push(0);
minStack.push(-3);
minStack.getMin(); // return -3
minStack.pop();
minStack.top();    // return 0
minStack.getMin(); // return -2
 

Constraints:

Methods pop, top and getMin operations will always be called on non-empty stacks.


Class Defination : -

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack obj = new MinStack();
 * obj.push(x);
 * obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.getMin();
 */
 

Solution : -

class MinStack 
{
    ListNode head;
   
    public void push(int x) 
	{
        if(head == null)
		{
            head = new ListNode(x, x);
        } 
		else 
		{
            ListNode newNode = new ListNode(x, Math.min(x,head.min));
            newNode.next = head;
			head = newNode;
        }
    }
    
    public void pop() 
	{
        if(head != null)
            head = head.next;
    }
    
    public int top() 
	{
        return head == null ? 0 : head.val;
    }
    
    public int getMin() 
	{
        return head == null ? 0 : head.min;
    }
	
	private static class ListNode
	{
		int val;
		int min;
		ListNode next;
        
		ListNode(int x, int min) 
		{
			this.val = x;
			this.min = min;
		}
    }
}

